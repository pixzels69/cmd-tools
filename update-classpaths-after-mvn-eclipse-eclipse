#!/usr/bin/python
# -*- coding: utf-8 -*-

import os.path as mod_path
import os      as mod_os
import re      as mod_re

def get_pom_artifact_id(pom_file_name):
    with open(pom_file_name) as f:
        pom_contents = f.read()

    if '<parent>' in pom_contents:
        pom_contents = pom_contents[0 : pom_contents.find('<parent>')] + pom_contents[pom_contents.find('</parent>') :]

    result = mod_re.findall('.*?<project.*?<artifactId>([^<]*).*', pom_contents, mod_re.DOTALL)

    print pom_file_name

    return result[0]

def get_artifact_ids():
    result = []

    directories = mod_os.listdir('..')

    for directory in directories:
        pom_file_name = '../{0}/pom.xml'.format(directory)
        if mod_path.exists(pom_file_name):
            result.append(get_pom_artifact_id(pom_file_name))
	
    return result

workspace_projects_artifacts = get_artifact_ids()

with open('.classpath') as f:
    pom_contents = f.read()

new_pom = ''

result = []

project_classpath_entries = []

under_comment = False
for line in pom_contents.split('\n'):
    artifact_id_found = False

    for artifact_id in workspace_projects_artifacts:
        if '/{0}/'.format(artifact_id) in line:
            artifact_id_found = True
            replacement_line = '<classpathentry kind="src" path="/{0}"/>'.format(artifact_id)
            if replacement_line not in result:
                if not replacement_line in project_classpath_entries:
                    project_classpath_entries.append(replacement_line)
            if line.strip().endswith('/>'):
                result.append('<!-- {0} -->'.format(line))
            else:
                result.append('<!-- {0}'.format(line))
                under_comment = True

    if not artifact_id_found:
        if under_comment:
            if line.strip() == '</classpathentry>':
                result.append(line)
                result.append('-->')
                under_comment = False
            else:
                result.append(line)
        else:
            result.append(line)

classpath = '\n'.join(result)
classpath = classpath.replace('</classpath>', '\n'.join(project_classpath_entries)) + '\n</classpath>'

with open('.classpath', 'w') as f:
    f.write(classpath)
