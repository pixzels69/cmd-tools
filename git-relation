#!/usr/bin/python

"""
Show a relation between two git commits/tags/branches.
"""

import pdb

import os as mod_os
import sys as mod_sys

branches = mod_sys.argv[1:]

def execute(command):
	output = ''
	p = mod_os.popen( command )
	for line in p:
		output += '%s' % line

	return (not p.close(), output)

if not branches:
    print 'No branches specified'
    mod_sys.exit(1)

if len(branches) == 1:
    branches = ['HEAD'] + branches

if len(branches) != 2:
    print 'Two branches expected, got %s' % branches
    mod_sys.exit(1)

def get_git_sha1(branch_name):
    success, sha1 = execute('git log -1 %s --format=%%H' % branch_name)
    if not success:
        print 'Invalid branch %s' % branch_name
        mod_sys.exit(1)
    return sha1.strip()

def print_log(commit_1, commit_2):
    print 'Commits from \033[1;34m%s\033[1;m to \033[1;34m%s\033[1;m:' % (commit_1, commit_2)
    success, log = execute('git log %s..%s --format="  %%h %%Cgreen%%an%%Creset \"%%Cred%%s%%Creset\", %%ar"' % (commit_1, commit_2))
    if not success:
        print 'Error retrieving log %s..%s' % (commit_1, commit_2)
        mod_sys.exit(1)
    print log.rstrip()

branch_1 = branches[0]
branch_2 = branches[1]

branch_1_sha1 = get_git_sha1(branch_1)
branch_2_sha1 = get_git_sha1(branch_2)

success, merge_base = execute('git merge-base %s %s' % (branch_1, branch_2))
merge_base = merge_base.strip()
if not success:
    print 'Can\'t find merge base for %s and %s' % (branch_1, branch_2)
    mod_sys.exit(1)

elif merge_base == branch_1_sha1 and merge_base == branch_2_sha1:
    print '\033[1;34m%s\033[1;m \033[1;31mEQUALS\033[1;m \033[1;34m%s\033[1;m' % (branch_1, branch_2)
elif merge_base == branch_1_sha1:
    print '\033[1;34m%s\033[1;m is \033[1;31mBEHIND\033[1;m \033[1;34m%s\033[1;m' % (branch_1, branch_2)
    print
    print_log(branch_1, branch_2)
elif merge_base == branch_2_sha1:
    print '\033[1;34m%s\033[1;m is \033[1;31mAHEAD\033[1;m of \033[1;34m%s\033[1;m' % (branch_1, branch_2)
    print
    print_log(branch_2, branch_1)
else:
    print '\033[1;34m%s\033[1;m and %s \033[1;31mDIVERGED\033[1;m, common point is \033[1;34m%s\033[1;m' % (branch_1, branch_2, merge_base)
    print
    print_log(merge_base, branch_1)
    print
    print_log(merge_base, branch_2)
