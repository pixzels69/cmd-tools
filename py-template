#!/usr/bin/python
# -*- coding: utf-8 -*-

import utils.optparser as mod_optparser
import sys             as mod_sys
import re              as mod_re
import os              as mod_os
import os.path         as mod_path

opt_parser = mod_optparser.OptParser()

class_name = opt_parser.get_param( short_name = 'cl', long_name = 'class', comment = 'Class name (if any)' )
shebang = opt_parser.has_param( short_name = 'sh', long_name = 'shebang', comment = 'Shebang (i.e. the line "#!/usr/bin/python" at the start)' )
coding = opt_parser.get_param( short_name = 'cc', long_name = 'coding-charset', comment = 'Coding charset (i.e. the line: "# -*- coding: utf-8 -*- " )', default = 'utf-8' )
no_coding = opt_parser.has_param( short_name = 'nocc', long_name = 'no-coding-charset', comment = 'Do not add coding charset line' )
main = opt_parser.has_param( short_name = 'ma', long_name = 'main', comment = 'Create if __name__ == \'__main__\': ...' )
is_module = opt_parser.has_param( short_name = 'mo', long_name = 'module', comment = 'Create module instead of file' )
is_help = opt_parser.has_param( short_name = 'h', long_name = 'help', comment = 'This help' )
import_logger = opt_parser.has_param( short_name = 'lo', long_name = 'logger', comment = 'Import logger?' )
console_logger = opt_parser.has_param( short_name = 'clo', long_name = 'console-logger', comment = 'Basic console logger' )
file_logger = opt_parser.has_param( short_name = 'flo', long_name = 'file-logger', comment = 'Basic file logger' )
force_save = opt_parser.has_param( short_name = 'f', long_name = 'force', comment = 'Force write (even if the file exists' )

file_names = opt_parser.args_left()

if no_coding:
	coding = None

if ( not file_names and not is_module ) or is_help:
	print "Create empty python scripts"
	print "Parameters:"
	print "\n".join( opt_parser.get_comments() )
	mod_sys.exit( 1 )

result = []

def mk_py_dir_all( package ):
	print 'Creating python module: {0}'.format( package )
	parts = package.split( '/' )
	tmp_path = ''
	for part in parts:
		if not mod_re.match( '^[\w\d_]+$', part ):
			print 'Invalid directory name: {0}'.format( part )
			mod_sys.exit( 1 )
		tmp_path = '{0}/{1}'.format( tmp_path, part )
		if tmp_path.startswith( '/' ):
			tmp_path = tmp_path[ 1 : ]
		mk_py_dir( tmp_path )

def mk_py_dir( path ):
		if not mod_path.exists( path ):
			mod_os.mkdir( path )
			print 'Created directory: {0}'.format( path )
		file_name = '{0}/__init__.py'.format( path )
		if not mod_path.exists( file_name ):
			f = open( file_name, 'w' )
			f.write( '' )
			f.close()
			print 'Created empty file: {0}/__init__.py'.format( path )

if is_module:
	for file_name in file_names:
		mk_py_dir_all( file_name )
else:
	if shebang:
		result.append( '#!/usr/bin/python' )
	
	if coding:
		result.append( '# -*- coding: utf-8 -*-' )

	result.append( '' )
	
	if class_name:
		result.append( 'class {0}:'.format( class_name ) )
		result.append( '\tdef __init__( self ):' )
		result.append( '\t\tpass' )
		result.append( '' )
	
	if main:
		result.append( 'if __name__ == \'__main__\':' )
		result.append( '\tpass' )
		result.append( '' )

	if import_logger or console_logger or file_logger:
		result.append( 'import logging as mod_log' )
		result.append( '' )

	if console_logger:
		result.append( 'mod_log.basicConfig( level = mod_log.DEBUG,' )
		result.append( '                     format = \'%(asctime)s %(name)-12s %(levelname)-8s %(message)s\' )' )
		result.append( '' )
	elif file_logger:
		result.append( 'mod_log.basicConfig( level = mod_log.DEBUG,' )
		result.append( '                     format = \'%(asctime)s %(name)-12s %(levelname)-8s %(message)s\',' )
		result.append( '                     datefmt = \'%m-%d %H:%M\' ),' )
		result.append( '                     filename = \'app.log\',' )
		result.append( '                     filemode = \'w\' )' )
		result.append( '' )

	if file_logger:
		pass
	
	result = '\n'.join( result )
	
	for file_name in file_names:
		if not file_name.endswith( '.py' ):
			file_name = '{0}.py'.format( file_name )
		if not force_save and mod_path.exists( file_name ):
			print 'File {0} already exists!'.format( file_name )
		else:
			f = open( file_name, 'w' )
			f.write( result )
			f.close()
			print 'Written {0}'.format( file_name )
