#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys
import os

from utils import optparser as mod_optparser

optparser = mod_optparser.OptParser()

expand = optparser.has_param( short_name = 'e', long_name = 'expand' )
join = optparser.has_param( short_name = 'j', long_name = 'join' )

tab_size = optparser.get_param( short_name = 's', long_name = 'size', default = 8 )
tab_size = int( tab_size )

write = optparser.has_param( short_name = 'w', long_name = 'write' )

files = optparser.args_left()

tab_as_spaces = ''
for i in range( tab_size ):
	tab_as_spaces += ' '

if not expand and not join or not files:
	print "Expand/join indentation tabs"
	print "Usage:"
	command = sys.argv[ 0 ].split( '/' )[ -1 ]
	print "%s --expand files..." % command
	print "%s --join files..." % command
	print "%s --expand --size=8 files..." % command
	print "%s --join --size=8 files..." % command
	print 'Use --write to overwrite the same file'
	print
	sys.exit( 1 )

def process_file( file_name ):
	global expand, join
	result = ''
	f = open( file_name, 'r' )
	for line in f:
		if expand:
			result += process_indentation( line, expand = True )
		if join:
			result += process_indentation( line, expand = None )
	f.close()

	return result

def process_indentation( line, expand ):
	global tab_size, tab_as_spaces

	if not line:
		return line

	pos = line.find( line.strip() )
	spaces = line[ 0 : pos ]
	non_spaces = line[ pos : ]

	if expand:
		spaces = spaces.replace( '\t', tab_as_spaces )
	else:
		spaces = spaces.replace( tab_as_spaces, '\t' )

	return spaces + non_spaces

for file_name in files:
	result = process_file( file_name )
	if write:
		f = open( file_name, 'w' )
		f.write( result )
		f.close()
	else:
		print result
