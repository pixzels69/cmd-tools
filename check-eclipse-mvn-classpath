#!/usr/bin/python

import os        as mod_os
import os.path   as mod_path
import re        as mod_re
import sys       as mod_sys

projects = mod_sys.argv[ 1 : ]

if not projects:
	projects = mod_os.listdir( '.' )

def get_classpath_entry( line ):
	groups = mod_re.findall( '.*<classpathentry.*path="([^"]*)', line )
	if groups:
		return groups[ 0 ]

def get_classpath_entry_and_version( entry ):
	jar_file = entry.split( '/' )[ -1 ]
	groups = mod_re.findall( '([\w\-]+)\-([\d\-\.]*\d).*', jar_file )
	return groups[ 0 ]

def process_classpath( string ):
	classpath_entries = []
	for line in string.split( '\n' ):
		entry = get_classpath_entry( line )
		if entry:
			classpath_entries.append( entry )

	versions = {}

	for entry in classpath_entries:
		if entry.endswith( '.jar' ):
			name, version = get_classpath_entry_and_version( entry )
			if not versions.has_key( name ):
				versions[ name ] = []
			versions[ name ].append( version )

	for name, ver in versions.items():
		if len( ver ) > 1:
			print ' Jar {0} has possibly more than one entry in classpath {1}'.format( name, ver )

for project in projects:
	classpath_file = '{0}/.classpath'.format( project )
	if mod_path.exists( classpath_file ):
		f = open( classpath_file )
		classpath_contents = f.read()
		f.close()

		print classpath_file
		process_classpath( classpath_contents )
