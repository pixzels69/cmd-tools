#!/usr/bin/python
# -*- coding: utf-8 -*-

import re               as mod_re
import os               as mod_os
import os.path          as mod_path
import xml.dom.minidom  as mod_minidom
import sys              as mod_sys
import codecs           as mod_codecs

projects = mod_sys.argv[1 :]

if not projects:
    print 'No project selected'
    mod_sys.exit(1)

def find_first_child(node, child_node_name):
    if not node or not child_node_name:
        return None
    child_nodes = node.childNodes
    for child_node in child_nodes:
        if child_node.nodeName == child_node_name:
            return child_node
    return None

def read(file_name):
    f = mod_codecs.open(file_name, 'r', encoding = 'ascii', errors = 'ignore')
    contents = f.read()
    f.close()

    return contents

def read_and_parse(file_name):
    return mod_minidom.parseString(read(file_name))

def parse_project_metadata(project_folder):
    print 'Parsing:', project_folder

    pom_file = '{0}/pom.xml'.format(project_folder)

    dom = read_and_parse(pom_file)

    result = {}

    project_node = find_first_child(dom, 'project')

    group_id_node = find_first_child(project_node, 'groupId')
    result['group_id'] = group_id_node.childNodes[0].nodeValue

    artifact_id_node = find_first_child(project_node, 'artifactId')
    result['artifact_id'] = artifact_id_node.childNodes[0].nodeValue

    named_node = find_first_child(project_node, 'name')
    if named_node:
        result['name'] = named_node.childNodes[0].nodeValue
    else:
        result['name'] = '?'

    version_node = find_first_child(project_node, 'version')
    result['version'] = version_node.childNodes[0].nodeValue

    result['directory'] = project_folder

    """
    description_node = find_first_child(project_node, 'description')
    result['description'] = description_node.childNodes[0].nodeValue
    """

    return result

def is_maven_project(directory):
    try:
        pom_file = '{0}/pom.xml'.format(directory)
        return mod_path.exists(pom_file)
    except Exception, e:
        return False

def update_pom(directory):
    print 'Update pom: {0}'.format(directory)

    pom_file = '{0}/pom.xml'.format(directory)
    pom = read(pom_file)
    dom = read_and_parse(pom_file)

    project_node = find_first_child(dom, 'project')
    dependencies_node = find_first_child(project_node, 'dependencies')

    if not dependencies_node:
        print 'No dependencies'
        return

    for node in dependencies_node.childNodes:
        if node.nodeName == 'dependency':
            group_id = find_first_child(node, 'groupId').childNodes[0].nodeValue
            artifact_id = find_first_child(node, 'artifactId').childNodes[0].nodeValue
            version = find_first_child(node, 'version').childNodes[0].nodeValue

            scope_node = find_first_child(node, 'scope')
            if scope_node:
                scope = scope_node.childNodes[0].nodeValue
            else:
                scope = None

            pom = check_local_project(group_id, artifact_id, version, pom)
	
    f = mod_codecs.open(pom_file, 'w')
    f.write(pom)
    f.close()

def check_local_project(group_id, artifact_id, version, pom):
    for metadata in project_metadatas:
        if group_id == metadata['group_id'] and artifact_id == metadata['artifact_id']:
            if version == metadata['version']:
                #print 'Local project {0} {1} version OK'.format(group_id, artifact_id)
                pass
            else:
                print 'Local project {0} {1} version is {2}, but should be {3}'.format(group_id, artifact_id, version, metadata['version'])
                pom = replace_dependency_version(group_id, artifact_id, version, metadata['version'], pom)
    return pom

def replace_dependency_version(group_id, artifact_id, current_version, desired_version, pom):
    found = mod_re.findall('(<dependency>.*?</dependency>)'.format(artifact_id), pom, mod_re.DOTALL)
    for dependency in found:
        if dependency.find(artifact_id) >= 0 and dependency.find(group_id) >= 0:
            print '-----------------------------------------'
            new_dependency = dependency.replace(current_version, desired_version)
            #print 'Change:{0}'.format(dependency.replace('\n', ' '))
            #print 'To:    {0}'.format(new_dependency.replace('\n', ' '))
            print current_version, '->', desired_version
            if current_version.startswith('${') and current_version.endswith('}'):
                current_version_tag = current_version[2 : -1]
                change_from = '(<{0}>).*(</{0}>)'.format(current_version_tag)
                change_to = '<{0}>{1}</{0}>'.format(current_version_tag, desired_version)
                pom, changes = mod_re.subn(change_from, change_to, pom)
            else:
                pom = pom.replace(dependency, new_dependency)
	
    return pom

directories = mod_os.listdir('.')

project_metadatas = []

for directory in directories:
    if is_maven_project(directory):
        try:
            metadata = parse_project_metadata(directory)
            project_metadatas.append(metadata)
        except Exception, e:
            pass

for directory in projects:
    if is_maven_project(directory):
        update_pom(directory)

