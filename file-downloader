#!/usr/bin/python
# -*- coding: utf-8 -*-

#test

import os as mod_os
import os.path as mod_path
import sys as mod_sys
import re as mod_re
import urllib as mod_urllib

from utils import optparser

###############################
# Command line params:
###############################

opt_parser = optparser.OptParser()

print_wget = opt_parser.has_param( long_name = 'print-wget', comment = 'Only print wget lines' )
add_counter = opt_parser.has_param( long_name = 'add-counter', comment = 'Add counter to downloaded files' )

ask = opt_parser.has_param( long_name = 'ask', comment = 'Ask if download for found file links' )
execute_wget = opt_parser.has_param( long_name = 'execute-wget', comment = 'Execute wget commands for found file links' )

aliases = opt_parser.has_param( long_name = 'aliases', comment = 'Print aliases' )
edit_aliases = opt_parser.has_param( long_name = 'edit-aliases', comment = 'Edit aliases' )

prefix = opt_parser.get_param( long_name = 'prefix', default = '', comment = 'File prefix when downloading' )
if not prefix:
	prefix = ''

extensions = opt_parser

max_rows = int( opt_parser.get_param( long_name = 'max', default = '20', comment = 'Max number of links retrieved' ) )

reverse = opt_parser.has_param( long_name = 'reverse', comment = 'Revert links' )

extensions = opt_parser.get_param( long_name = 'extensions', comment = 'Extensions to search (default: mp3 and m4a)' )
if not extensions:
	extensions = [ 'mp3', 'm4a' ]
else:
	extensions = extensions.split( ',' )

args_left = opt_parser.args_left()

url_aliases_file = '%s/.file_downloader_url_aliases' % mod_os.environ[ 'HOME' ]
downloaded_files_file = '%s/.file_downloader_downloaded' % mod_os.environ[ 'HOME' ]

###############################
# Functions:
###############################

def get_aliases():
	result = {}
	if mod_path.exists( url_aliases_file ):
		f = open( url_aliases_file, 'r' )
		for line in f:
			if line and line.strip() and line[ 0 ] != '#':
				parts = mod_re.split( '\s+', line.strip() )
				if len( parts ) >= 2:
					result[ parts[ 0 ] ] = parts[ 1 ]
		f.close()
	return result

def get_editor():
	editor = None
	if mod_os.environ.has_key( 'EDITOR' ):
		editor = mod_os.environ[ 'EDITOR' ]
	if not editor:
		editor = raw_input( 'Editor [vi]:' )
		if not editor:
			editor = 'vi'
	return editor

def wget_command( mp3, file_name ):
	return "wget -c \"%s\" -O %s" % ( mp3, file_name )

def download( mp3, file_name ):
	p = mod_os.popen( wget_command( mp3, file_name ) )

	for line in p:
		print line

	return p.close()

###############################
# Aliases:
###############################

if aliases:
	for alias, value in get_aliases().items():
		print '%25s: %s' % ( alias, value )
	mod_sys.exit( 0 )
if edit_aliases:
	mod_os.system( '%s %s' % ( get_editor(), url_aliases_file ) )
	mod_sys.exit( 0 )

###############################
# Help command line:
###############################

if not args_left:
	print "Find file links in given urls"
	print "Parameters:"
	print "\n".join( opt_parser.get_comments() )
	mod_sys.exit( 1 )

url = args_left[ 0 ]

# Let's see if url is an alias
alias_candidates = {}
if mod_path.exists( url_aliases_file ):
	for alias_name, alias_value in get_aliases().items():
		if url == alias_name[ 0 : len( url ) ]:
			alias_candidates[ alias_name ] = alias_value

if len( alias_candidates ) == 1:
	url = alias_candidates[ alias_candidates.keys()[ 0 ] ]
elif len( alias_candidates ) > 0:
	print 'Found more than 1 potential alias: %s' % ', '.join( alias_candidates.keys() )
	mod_sys.exit( 1 )

all_mp3_urls = []

try:
	f = mod_urllib.urlopen( url )
except Exception, e:
	print 'Can\'t open "%s"' % url
	mod_sys.exit( 1 )

for line in f:
	mp3_urls = None
	for extension in extensions:
		if not mp3_urls:
			mp3_urls = mod_re.findall( '[\'"]http[^\'"]+%s[\'"]' % extension, line )
	if mp3_urls:
		for mp3 in mp3_urls:
			mp3 = mp3.replace( '"', '' )
			mp3 = mp3.replace( "'", '' )
			if not mp3 in all_mp3_urls:
				all_mp3_urls.append( mp3 )

if reverse:
	all_mp3_urls.reverse()

if len( all_mp3_urls ) > max_rows:
	all_mp3_urls = all_mp3_urls[ : max_rows ]

if not execute_wget and not ask:
	print 'Use --wget or --ask to download files:'

n = 1
for mp3 in all_mp3_urls:
	parts = mp3.split( '/' )
	file_name = parts[ -1 ]
	if add_counter:
		if len( file_name ) > 20:
			file_name = file_name[ 0 : 20 ] + file_name[ -4 : ]
		file_name = str( n ).zfill( 3 ) + "-" + file_name

	file_name = prefix + file_name

	if print_wget:
		print wget_command( mp3, file_name )
	else:
		print mp3

	if execute_wget:
		print 'Executing %s' % wget_command( mp3, file_name )
		download( mp3, file_name )
	elif ask:
		answer = raw_input( 'Execute %s ? [y]es / [N]o /q]' % wget_command( mp3, file_name ) )
		answer = answer.lower()
		if answer == 'y':
			download( mp3, file_name )
		elif answer == 'q':
			mod_sys.exit( 0 )

	n = n + 1
